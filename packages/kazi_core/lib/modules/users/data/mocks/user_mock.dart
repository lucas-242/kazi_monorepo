import 'package:kazi_core/modules/services/data/mocks/service_type_mock.dart';
import 'package:kazi_core/shared/entities/address.dart';
import 'package:kazi_core/shared/entities/user.dart';
import 'package:kazi_core/shared/enums/user_type.dart';

abstract class UserMock {
  static final employees = [
    User(
      id: 1,
      identifier: '11111111111',
      name: 'Ana Banana',
      email: 'ana.banana@test.com',
      birthDate: DateTime(1990, 1, 15),
      userType: UserType.employee,
      admissionDate: DateTime(2021, 5, 20),
      role: 'Nail Designer',
      authToken: '',
      refreshToken: '',
      authExpires: DateTime.now(),
      phones: const ['(21) 11111-1111'],
      addresses: const [
        Address(
          id: 1,
          postalCode: '11111-111',
          street: 'Rua das Unhas',
          number: 10,
          neighborhood: 'Centro',
          city: 'Rio de Janeiro',
          state: 'RJ',
        ),
      ],
      services:
          ServiceTypeMock.nailServices.where((s) => s.userId == 1).toList(),
    ),
    User(
      id: 2,
      identifier: '22222222222',
      name: 'Beatriz Batata',
      email: 'beatriz.batata@test.com',
      birthDate: DateTime(1992, 3, 25),
      userType: UserType.employee,
      admissionDate: DateTime(2022, 1, 10),
      role: 'Nail Designer',
      authToken: '',
      refreshToken: '',
      authExpires: DateTime.now(),
      phones: const ['(21) 22222-2222'],
      addresses: const [
        Address(
          id: 2,
          postalCode: '22222-222',
          street: 'Avenida das Unhas',
          number: 20,
          neighborhood: 'Copacabana',
          city: 'Rio de Janeiro',
          state: 'RJ',
        ),
      ],
      services:
          ServiceTypeMock.nailServices.where((s) => s.userId == 2).toList(),
    ),
    User(
      id: 3,
      identifier: '33333333333',
      name: 'Carla Cílios',
      email: 'carla.cilios@test.com',
      birthDate: DateTime(1988, 7, 30),
      userType: UserType.employee,
      admissionDate: DateTime(2020, 8),
      role: 'Lash Designer',
      authToken: '',
      refreshToken: '',
      authExpires: DateTime.now(),
      phones: const ['(21) 33333-3333'],
      addresses: const [
        Address(
          id: 3,
          postalCode: '33333-333',
          street: 'Rua dos Cílios',
          number: 30,
          neighborhood: 'Ipanema',
          city: 'Rio de Janeiro',
          state: 'RJ',
        ),
      ],
      services: ServiceTypeMock.lashServices,
    ),
    User(
      id: 4,
      identifier: '44444444444',
      name: 'Daniela Derme',
      email: 'daniela.derme@test.com',
      birthDate: DateTime(1985, 11, 5),
      userType: UserType.employee,
      admissionDate: DateTime(2019, 3, 15),
      role: 'Esteticista',
      authToken: '',
      refreshToken: '',
      authExpires: DateTime.now(),
      phones: const ['(21) 44444-4444'],
      addresses: const [
        Address(
          id: 4,
          postalCode: '44444-444',
          street: 'Travessa da Pele',
          number: 40,
          neighborhood: 'Leblon',
          city: 'Rio de Janeiro',
          state: 'RJ',
        ),
      ],
      services: ServiceTypeMock.estheticianServices,
    ),
    User(
      id: 5,
      identifier: '55555555555',
      name: 'Eduarda Esmalte',
      email: 'eduarda.esmalte@test.com',
      birthDate: DateTime(1995, 2, 20),
      userType: UserType.employee,
      admissionDate: DateTime(2023, 6),
      role: 'Manicure',
      authToken: '',
      refreshToken: '',
      authExpires: DateTime.now(),
      phones: const ['(21) 55555-5555'],
      addresses: const [
        Address(
          id: 5,
          postalCode: '55555-555',
          street: 'Praça das Mãos',
          number: 50,
          neighborhood: 'Botafogo',
          city: 'Rio de Janeiro',
          state: 'RJ',
        ),
      ],
      services: ServiceTypeMock.manicureServices,
    ),
  ];

  static final clients = [
    User(
      id: 6,
      identifier: '66666666666',
      name: 'Fernanda Rocha',
      email: 'fernanda.rocha@test.com',
      birthDate: DateTime(1991, 8, 12),
      userType: UserType.client,
      authToken: '',
      refreshToken: '',
      authExpires: DateTime.now(),
      phones: const ['(11) 66666-6666'],
      addresses: const [
        Address(
          id: 6,
          postalCode: '66666-666',
          street: 'Rua dos Clientes',
          number: 60,
          neighborhood: 'Vila Madalena',
          city: 'São Paulo',
          state: 'SP',
        ),
      ],
    ),
    User(
      id: 7,
      identifier: '77777777777',
      name: 'Gabriel Souza',
      email: 'gabriel.souza@test.com',
      birthDate: DateTime(1989, 4, 22),
      userType: UserType.client,
      authToken: '',
      refreshToken: '',
      authExpires: DateTime.now(),
      phones: const ['(11) 77777-7777'],
    ),
    User(
      id: 8,
      identifier: '88888888888',
      name: 'Heloisa Lima',
      email: 'heloisa.lima@test.com',
      birthDate: DateTime(1993, 12),
      userType: UserType.client,
      authToken: '',
      refreshToken: '',
      authExpires: DateTime.now(),
      phones: const ['(11) 88888-8888'],
    ),
    User(
      id: 9,
      identifier: '99999999999',
      name: 'Igor Martins',
      email: 'igor.martins@test.com',
      birthDate: DateTime(1994, 7, 7),
      userType: UserType.client,
      authToken: '',
      refreshToken: '',
      authExpires: DateTime.now(),
      phones: const ['(11) 99999-9999'],
    ),
    User(
      id: 10,
      identifier: '10101010101',
      name: 'Juliana Alves',
      email: 'juliana.alves@test.com',
      birthDate: DateTime(1987, 9, 18),
      userType: UserType.client,
      authToken: '',
      refreshToken: '',
      authExpires: DateTime.now(),
      phones: const ['(11) 10101-0101'],
    ),
    User(
      id: 11,
      identifier: '11011011011',
      name: 'Lucas Pereira',
      email: 'lucas.pereira@test.com',
      birthDate: DateTime(1998, 2, 28),
      userType: UserType.client,
      authToken: '',
      refreshToken: '',
      authExpires: DateTime.now(),
      phones: const ['(11) 11011-0110'],
    ),
    User(
      id: 12,
      identifier: '12121212121',
      name: 'Mariana Costa',
      email: 'mariana.costa@test.com',
      birthDate: DateTime(1996, 5, 3),
      userType: UserType.client,
      authToken: '',
      refreshToken: '',
      authExpires: DateTime.now(),
      phones: const ['(11) 12121-2121'],
    ),
    User(
      id: 13,
      identifier: '13131313131',
      name: 'Natalia Santos',
      email: 'natalia.santos@test.com',
      birthDate: DateTime(1990, 10, 10),
      userType: UserType.client,
      authToken: '',
      refreshToken: '',
      authExpires: DateTime.now(),
      phones: const ['(11) 13131-3131'],
    ),
    User(
      id: 14,
      identifier: '14141414141',
      name: 'Otavio Ferreira',
      email: 'otavio.ferreira@test.com',
      birthDate: DateTime(1986, 1, 5),
      userType: UserType.client,
      authToken: '',
      refreshToken: '',
      authExpires: DateTime.now(),
      phones: const ['(11) 14141-4141'],
    ),
    User(
      id: 15,
      identifier: '15151515151',
      name: 'Patricia Gomes',
      email: 'patricia.gomes@test.com',
      birthDate: DateTime(1997, 4, 14),
      userType: UserType.client,
      authToken: '',
      refreshToken: '',
      authExpires: DateTime.now(),
      phones: const ['(11) 15151-5151'],
    ),
  ];

  static final all = [...employees, ...clients];
}
